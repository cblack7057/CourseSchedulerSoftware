//Algorithm Code Ex:

function generatePairs()
{
	for( i=0; i<queryArray.length-1; i++){
	for( j = i+1; j< queryArray.length; j++){
		for( m = 0; m < queryArray[i].length; m++){
			for( n = 0; n< queryArray[j].length; n++){
				 k =0;
				 l = 0;
				var checking = true;
				while(checking)
				{
					if(queryArray[i][m].Meetings[k].Day < queryArray[j][n].Meetings[l].Day)
					{
						if(k == queryArray[i][m].Meetings.leng-1)
						{
							checking = false;
							saveCombo(i,m,j,n);
							console.log('Course 1 < Course 2');
						}
						else
						{
							k++;
						}
					}
					else if (queryArray[i][m].Meetings[k].Day == queryArray[j][n].Meetings[l].Day)
					{
						checking = noTimeConflict(queryArray[i][m].Meetings[k].StartTime, queryArray[i][m].Meetings[k].EndTime, queryArray[j][n].Meetings[l].StartTime, queryArray[j][n].Meetings[l].EndTime);
						if(checking && (l == queryArray[j][n].Meetings.length-1))
						{
							if(k == queryArray[i][m].Meetings.length-1)
							{
								saveCombo(i,m,j,n);
								console.log('k == Course');
								checking = false;
							}
							else
							{
								l = 0;
							}
						}
						else
						{
							l++;
						}
					}
					else
					{
						if(l == queryArray[j][n].Meetings.length - 1 )
						{
							if(k == queryArray[i][m].Meetings.length - 1)
							{
								checking = false;
								saveCombo(i,m,j,n);
								console.log('k and l == course');
							}
							else
							{
								l = 0;
								k++;
							}
						}
						else
						{
							l++;
						}
					}
					
				}
			}
		}
	}
}
	
	
	//noTimeConflict Code
	
	noTimeConflict(ST1, ET1, ST2, ET2){
		if(ST1 < ST2 && ET1 < ST2){
			return true;
		}
		if(ST1 > ST2 && ET2 < ST1){
			return true;
		)
		return false;
	}
	
	//saveCombo Code
	coursePairs = [][];
	saveCombo(i,m,j,n){
		sum = 0;
		for(k = 1; k < i; k++){
			sum += totalCourses - k - 1;
			
		}
		index = j - 2 + sum;
		coursePairs[index].push([i,m,j,n]);
	}
	
	j-2 * (summation from n = 1 to i-1) * #courses - n - 1
	
	
	//recursive tree builder code
	//base cases
	var row = [];
	if(queryArray.length == 0)
	{
		return row;
	}
	if(level == queryArray.length)
	{
		for(var i = 0; i < queryArray[level-1].length; i++)
		{
			row.push([[level, i + 1], true]);	
		}
		return row;
	}


	for(var i = 0; i < queryArray[level-1].length; i++)
	{	
		row.push([[level, i + 1], treeMaker(level + 1)]);
	}
		return row;
}